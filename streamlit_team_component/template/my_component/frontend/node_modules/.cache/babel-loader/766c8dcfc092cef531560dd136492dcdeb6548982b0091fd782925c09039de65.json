{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hause\\\\OneDrive\\\\01_Studium\\\\02_Master\\\\05_Masterarbeit\\\\03_FootballAI-UI\\\\streamlit_team_component\\\\template\\\\my_component\\\\frontend\\\\src\\\\MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\n/**\r\n * This is a React-based component template. The passed props are coming from the \r\n * Streamlit library. Your custom args can be accessed via the `args` props.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MyComponent({\n  args,\n  disabled,\n  theme\n}) {\n  _s();\n  const {\n    name\n  } = args;\n  const [isFocused, setIsFocused] = useState(false);\n  const [numClicks, setNumClicks] = useState(0);\n  const style = useMemo(() => {\n    if (!theme) return {};\n\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`;\n    return {\n      border: borderStyling,\n      outline: borderStyling\n    };\n  }, [theme, isFocused]);\n  useEffect(() => {\n    Streamlit.setComponentValue(numClicks);\n  }, [numClicks]);\n\n  // setFrameHeight should be called on first render and evertime the size might change (e.g. due to a DOM update).\n  // Adding the style and theme here since they might effect the visual size of the component.\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  }, [style, theme]);\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback(() => {\n    setNumClicks(prevNumClicks => prevNumClicks + 1);\n  }, []);\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Hello, \", name, \"! \\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      style: style,\n      onClick: onClicked,\n      disabled: disabled,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      children: \"Click Me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n_s(MyComponent, \"7A4R+/QtW+RkszZWrJwC/jUNw6w=\");\n_c = MyComponent;\nexport default _c2 = withStreamlitConnection(MyComponent);\nvar _c, _c2;\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useCallback","useEffect","useMemo","useState","jsxDEV","_jsxDEV","MyComponent","args","disabled","theme","_s","name","isFocused","setIsFocused","numClicks","setNumClicks","style","borderStyling","primaryColor","border","outline","setComponentValue","setFrameHeight","onClicked","prevNumClicks","onFocus","onBlur","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["C:/Users/hause/OneDrive/01_Studium/02_Master/05_Masterarbeit/03_FootballAI-UI/streamlit_team_component/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\r\n  Streamlit,\r\n  withStreamlitConnection,\r\n  ComponentProps,\r\n} from \"streamlit-component-lib\"\r\nimport React, { useCallback, useEffect, useMemo, useState, ReactElement } from \"react\"\r\n\r\n/**\r\n * This is a React-based component template. The passed props are coming from the \r\n * Streamlit library. Your custom args can be accessed via the `args` props.\r\n */\r\nfunction MyComponent({ args, disabled, theme }: ComponentProps): ReactElement {\r\n  const { name } = args\r\n\r\n  const [isFocused, setIsFocused] = useState(false)\r\n  const [numClicks, setNumClicks] = useState(0)\r\n\r\n  const style: React.CSSProperties = useMemo(() => {\r\n    if (!theme) return {}\r\n\r\n    // Use the theme object to style our button border. Alternatively, the\r\n    // theme style is defined in CSS vars.\r\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\r\n    return { border: borderStyling, outline: borderStyling }\r\n  }, [theme, isFocused])\r\n\r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(numClicks)\r\n  }, [numClicks])\r\n\r\n  // setFrameHeight should be called on first render and evertime the size might change (e.g. due to a DOM update).\r\n  // Adding the style and theme here since they might effect the visual size of the component.\r\n  useEffect(() => {\r\n    Streamlit.setFrameHeight()\r\n  }, [style, theme])\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  const onClicked = useCallback((): void => {\r\n    setNumClicks((prevNumClicks) => prevNumClicks + 1)\r\n  }, [])\r\n\r\n  /** Focus handler for our \"Click Me!\" button. */\r\n  const onFocus = useCallback((): void => {\r\n    setIsFocused(true)\r\n  }, [])\r\n\r\n  /** Blur handler for our \"Click Me!\" button. */\r\n  const onBlur = useCallback((): void => {\r\n    setIsFocused(false)\r\n  }, [])\r\n\r\n  // Show a button and some text.\r\n  // When the button is clicked, we'll increment our \"numClicks\" state\r\n  // variable, and send its new value back to Streamlit, where it'll\r\n  // be available to the Python program.\r\n  return (\r\n    <span>\r\n      Hello, {name}! &nbsp;\r\n      <button\r\n        style={style}\r\n        onClick={onClicked}\r\n        disabled={disabled}\r\n        onFocus={onFocus}\r\n        onBlur={onBlur}\r\n      >\r\n        Click Me!\r\n      </button>\r\n    </span>\r\n  )\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(MyComponent)\r\n"],"mappings":";;AAAA,SACEA,SAAS,EACTC,uBAAuB,QAElB,yBAAyB;AAChC,OAAOC,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAsB,OAAO;;AAEtF;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,SAASC,WAAWA,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAsB,CAAC,EAAgB;EAAAC,EAAA;EAC5E,MAAM;IAAEC;EAAK,CAAC,GAAGJ,IAAI;EAErB,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAE7C,MAAMa,KAA0B,GAAGd,OAAO,CAAC,MAAM;IAC/C,IAAI,CAACO,KAAK,EAAE,OAAO,CAAC,CAAC;;IAErB;IACA;IACA,MAAMQ,aAAa,GAAG,aAAaL,SAAS,GAAGH,KAAK,CAACS,YAAY,GAAG,MAAM,EAAE;IAC5E,OAAO;MAAEC,MAAM,EAAEF,aAAa;MAAEG,OAAO,EAAEH;IAAc,CAAC;EAC1D,CAAC,EAAE,CAACR,KAAK,EAAEG,SAAS,CAAC,CAAC;EAEtBX,SAAS,CAAC,MAAM;IACdJ,SAAS,CAACwB,iBAAiB,CAACP,SAAS,CAAC;EACxC,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA;EACAb,SAAS,CAAC,MAAM;IACdJ,SAAS,CAACyB,cAAc,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACN,KAAK,EAAEP,KAAK,CAAC,CAAC;;EAElB;EACA,MAAMc,SAAS,GAAGvB,WAAW,CAAC,MAAY;IACxCe,YAAY,CAAES,aAAa,IAAKA,aAAa,GAAG,CAAC,CAAC;EACpD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,OAAO,GAAGzB,WAAW,CAAC,MAAY;IACtCa,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMa,MAAM,GAAG1B,WAAW,CAAC,MAAY;IACrCa,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA,oBACER,OAAA;IAAAsB,QAAA,GAAM,SACG,EAAChB,IAAI,EAAC,QACb,eAAAN,OAAA;MACEW,KAAK,EAAEA,KAAM;MACbY,OAAO,EAAEL,SAAU;MACnBf,QAAQ,EAAEA,QAAS;MACnBiB,OAAO,EAAEA,OAAQ;MACjBC,MAAM,EAAEA,MAAO;MAAAC,QAAA,EAChB;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX;;AAEA;AACA;AACA;AACA;AACA;AAAAtB,EAAA,CAhESJ,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAiEpB,eAAA4B,GAAA,GAAepC,uBAAuB,CAACQ,WAAW,CAAC;AAAA,IAAA2B,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}